{"ast":null,"code":"var _jsxFileName = \"/Users/mohsinidrees/Desktop/cognito_project/cognito_integration/src/components/authentication/ForgotPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Headercontext } from \"../Headerdata/HeaderData\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Layout from \"../layout\";\nimport Innerlayout from \"../layout/Innerlayout\";\nimport Inputbox from \"../common/Inputbox\";\nimport Button from \"../common/Button\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgotPassword = () => {\n  _s();\n  const {\n    setUserDetails,\n    setToken,\n    setLogin,\n    setSignup,\n    setForgetPassword,\n    setToastMessage,\n    setConfirmUser,\n    confirmUser,\n    setUserid\n  } = useContext(Headercontext);\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passwordIcon, setPasswordIcon] = useState(true);\n  const [error, setError] = useState({\n    isError: false,\n    message: \"\"\n  });\n  const [loader, setLoader] = useState(false);\n  const [confirmCode, setConfirmCode] = useState(\"\");\n  const [comfirmLoader, setConfirmLoader] = useState(false);\n  useEffect(() => {\n    setError({\n      isError: false,\n      message: \"\"\n    });\n  }, [email, password, confirmCode]);\n  var AmazonCognitoIdentity = require(\"amazon-cognito-identity-js\");\n  const userPool = new CognitoUserPool({\n    UserPoolId: \"ap-northeast-1_ub6BKbCOS\",\n    ClientId: \"40l4r3ri3b721utkclttqju4j8\"\n  });\n  const onSubmit = e => {\n    setLoader(true);\n    e.preventDefault();\n    const user = new CognitoUser({\n      Username: email,\n      Pool: UserPool\n    });\n    const authDetails = new AuthenticationDetails({\n      email: email,\n      Password: password\n    });\n    user.authenticateUser(authDetails, {\n      onSuccess: data => {\n        console.log(data);\n        let userData = {\n          username: data.idToken.payload.name,\n          userEmail: data.idToken.payload.email,\n          picture: createImageFromInitials(500, data.idToken.payload.name, getRandomColor()),\n          userId: data.accessToken.payload.client_id,\n          expTime: data.accessToken.payload.exp\n        };\n        setUserDetails(userData);\n        setToken(data.accessToken.jwtToken);\n        setUserid(data.accessToken.payload.client_id);\n        localStorage.setItem(\"user_ID\", data.accessToken.payload.client_id);\n        localStorage.setItem(\"user_details\", JSON.stringify(userData));\n        localStorage.setItem(\"token\", data.accessToken.jwtToken);\n        setLoader(false);\n        setLogin(false);\n        setToastMessage({\n          display: true,\n          message: \"Logged in successfully\"\n        });\n      },\n      onFailure: err => {\n        // toast(err.message || JSON.stringify(err));\n        if (err.message == \"User is not confirmed.\") {\n          const confirmUser = new CognitoUser({\n            Username: email,\n            Pool: userPool\n          });\n          confirmUser.resendConfirmationCode((err, result) => {\n            if (err) {\n              setError({\n                isError: true,\n                message: err.message || JSON.stringify(err)\n              });\n            } else {\n              setToastMessage({\n                display: true,\n                message: \"Confirmation code sent to email\"\n              });\n              setConfirmUser(true);\n              setLoader(false);\n            }\n          });\n        } else {\n          setLoader(false);\n          setError({\n            isError: true,\n            message: err.message || JSON.stringify(err)\n          });\n        }\n      },\n      newPasswordRequired: data => {\n        // console.log(\"newPasswordRequired:\", data);\n      }\n    });\n  };\n  const ConfirmUser = e => {\n    setConfirmLoader(true);\n    e.preventDefault();\n    let userData = {\n      Username: email,\n      Pool: userPool\n    };\n    let cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n    cognitoUser.confirmRegistration(confirmCode, true, function (err) {\n      if (err) {\n        setConfirmLoader(false);\n        setError({\n          isError: true,\n          message: err.message || JSON.stringify(err)\n        });\n        return;\n      }\n      setToastMessage({\n        display: true,\n        message: \"Confirmed Succesfully\"\n      });\n      setConfirmLoader(false);\n      onSubmit(e);\n      setConfirmUser(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Innerlayout, {\n      heading: \"Forgot Password\",\n      subheading: \"An email with a link will be sent to your email address to change password.\",\n      children: [/*#__PURE__*/_jsxDEV(Inputbox, {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        required: true,\n        heading: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        actiontype: \"Forgot Password\",\n        action: () => {\n          console.log(\"scdcscsdcs\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"simpletext\",\n          children: \"Have you remembered your password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/signin\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"forgot-password\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(ForgotPassword, \"P6AuFNNfSsjEyr/orLrYyBKJ7PY=\");\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Headercontext","ToastContainer","Layout","Innerlayout","Inputbox","Button","Link","jsxDEV","_jsxDEV","ForgotPassword","_s","setUserDetails","setToken","setLogin","setSignup","setForgetPassword","setToastMessage","setConfirmUser","confirmUser","setUserid","password","setPassword","email","setEmail","passwordIcon","setPasswordIcon","error","setError","isError","message","loader","setLoader","confirmCode","setConfirmCode","comfirmLoader","setConfirmLoader","AmazonCognitoIdentity","require","userPool","CognitoUserPool","UserPoolId","ClientId","onSubmit","e","preventDefault","user","CognitoUser","Username","Pool","UserPool","authDetails","AuthenticationDetails","Password","authenticateUser","onSuccess","data","console","log","userData","username","idToken","payload","name","userEmail","picture","createImageFromInitials","getRandomColor","userId","accessToken","client_id","expTime","exp","jwtToken","localStorage","setItem","JSON","stringify","display","onFailure","err","resendConfirmationCode","result","newPasswordRequired","ConfirmUser","cognitoUser","confirmRegistration","children","heading","subheading","type","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","actiontype","action","className","to","_c","$RefreshReg$"],"sources":["/Users/mohsinidrees/Desktop/cognito_project/cognito_integration/src/components/authentication/ForgotPassword.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Headercontext } from \"../Headerdata/HeaderData\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Layout from \"../layout\";\nimport Innerlayout from \"../layout/Innerlayout\";\nimport Inputbox from \"../common/Inputbox\";\nimport Button from \"../common/Button\";\nimport { Link } from \"react-router-dom\";\n\nconst ForgotPassword = () => {\n  const {\n    setUserDetails,\n    setToken,\n    setLogin,\n    setSignup,\n    setForgetPassword,\n    setToastMessage,\n    setConfirmUser,\n    confirmUser,\n    setUserid,\n  } = useContext(Headercontext);\n\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passwordIcon, setPasswordIcon] = useState(true);\n  const [error, setError] = useState({\n    isError: false,\n    message: \"\",\n  });\n  const [loader, setLoader] = useState(false);\n  const [confirmCode, setConfirmCode] = useState(\"\");\n  const [comfirmLoader, setConfirmLoader] = useState(false);\n\n  useEffect(() => {\n    setError({\n      isError: false,\n      message: \"\",\n    });\n  }, [email, password, confirmCode]);\n\n  var AmazonCognitoIdentity = require(\"amazon-cognito-identity-js\");\n  const userPool = new CognitoUserPool({\n    UserPoolId: \"ap-northeast-1_ub6BKbCOS\",\n    ClientId: \"40l4r3ri3b721utkclttqju4j8\",\n  });\n  const onSubmit = (e) => {\n    setLoader(true);\n    e.preventDefault();\n\n    const user = new CognitoUser({\n      Username: email,\n      Pool: UserPool,\n    });\n\n    const authDetails = new AuthenticationDetails({\n      email: email,\n      Password: password,\n    });\n\n    user.authenticateUser(authDetails, {\n      onSuccess: (data) => {\n        console.log(data);\n        let userData = {\n          username: data.idToken.payload.name,\n          userEmail: data.idToken.payload.email,\n          picture: createImageFromInitials(\n            500,\n            data.idToken.payload.name,\n            getRandomColor()\n          ),\n          userId: data.accessToken.payload.client_id,\n          expTime: data.accessToken.payload.exp,\n        };\n        setUserDetails(userData);\n        setToken(data.accessToken.jwtToken);\n        setUserid(data.accessToken.payload.client_id);\n        localStorage.setItem(\"user_ID\", data.accessToken.payload.client_id);\n        localStorage.setItem(\"user_details\", JSON.stringify(userData));\n        localStorage.setItem(\"token\", data.accessToken.jwtToken);\n        setLoader(false);\n        setLogin(false);\n        setToastMessage({\n          display: true,\n          message: \"Logged in successfully\",\n        });\n      },\n      onFailure: (err) => {\n        // toast(err.message || JSON.stringify(err));\n        if (err.message == \"User is not confirmed.\") {\n          const confirmUser = new CognitoUser({\n            Username: email,\n            Pool: userPool,\n          });\n          confirmUser.resendConfirmationCode((err, result) => {\n            if (err) {\n              setError({\n                isError: true,\n                message: err.message || JSON.stringify(err),\n              });\n            } else {\n              setToastMessage({\n                display: true,\n                message: \"Confirmation code sent to email\",\n              });\n              setConfirmUser(true);\n              setLoader(false);\n            }\n          });\n        } else {\n          setLoader(false);\n          setError({\n            isError: true,\n            message: err.message || JSON.stringify(err),\n          });\n        }\n      },\n      newPasswordRequired: (data) => {\n        // console.log(\"newPasswordRequired:\", data);\n      },\n    });\n  };\n\n  const ConfirmUser = (e) => {\n    setConfirmLoader(true);\n    e.preventDefault();\n    let userData = {\n      Username: email,\n      Pool: userPool,\n    };\n    let cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n    cognitoUser.confirmRegistration(confirmCode, true, function (err) {\n      if (err) {\n        setConfirmLoader(false);\n        setError({\n          isError: true,\n          message: err.message || JSON.stringify(err),\n        });\n        return;\n      }\n      setToastMessage({\n        display: true,\n        message: \"Confirmed Succesfully\",\n      });\n      setConfirmLoader(false);\n      onSubmit(e);\n      setConfirmUser(false);\n    });\n  };\n\n  return (\n    <Layout>\n      <Innerlayout\n        heading={\"Forgot Password\"}\n        subheading=\"An email with a link will be sent to your email address to change password.\"\n      >\n        <Inputbox\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          required\n          heading=\"Email\"\n        />\n        <Button\n          actiontype={\"Forgot Password\"}\n          action={() => {\n            console.log(\"scdcscsdcs\");\n          }}\n        />\n        <div>\n          <p className=\"simpletext\">Have you remembered your password</p>\n          <Link to=\"/signin\">\n            <p className=\"forgot-password\">Sign In</p>\n          </Link>\n        </div>\n      </Innerlayout>\n    </Layout>\n  );\n};\n\nexport default ForgotPassword;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}