{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/*!\n  * Amazon Cognito Auth SDK for JavaScript\n  * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\").\n  * You may not use this file except in compliance with the License.\n  * A copy of the License is located at\n  *\n  *         http://aws.amazon.com/apache2.0/\n  *\n  * or in the \"license\" file accompanying this file.\n  * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n  * OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions\n  * and limitations under the License.\n  */\n\nimport CognitoTokenScopes from './CognitoTokenScopes';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoAuthSession from './CognitoAuthSession';\nimport StorageHelper from './StorageHelper';\nimport { launchUri } from './UriHelper';\n\n/** @class */\n\nvar CognitoAuth = function () {\n  /**\n   * Constructs a new CognitoAuth object\n   * @param {object} data Creation options\n   * @param {string} data.ClientId Required: User pool application client id.\n   * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n   *                     this is set at the Cognito console.\n   * @param {array} data.TokenScopesArray Optional: The token scopes\n   * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n   * which will be launched after authentication as signed in.\n   * @param {string} data.RedirectUriSignOut Required:\n   * The redirect Uri, which will be launched when signed out.\n   * @param {string} data.IdentityProvider Optional: Pre-selected identity provider (this allows to\n   * automatically trigger social provider authentication flow).\n   * @param {string} data.UserPoolId Optional: UserPoolId for the configured cognito userPool.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional: boolean flag indicating if the\n   *        data collection is enabled to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   * @param {object} data.Storage Optional: e.g. new CookieStorage(), to use the specified storage provided\n   * @param {function} data.LaunchUri Optional: Function to open a url, by default uses window.open in browser, Linking.openUrl in React Native\n   * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n   */\n  function CognitoAuth(data) {\n    _classCallCheck(this, CognitoAuth);\n    var _ref = data || {},\n      ClientId = _ref.ClientId,\n      AppWebDomain = _ref.AppWebDomain,\n      TokenScopesArray = _ref.TokenScopesArray,\n      RedirectUriSignIn = _ref.RedirectUriSignIn,\n      RedirectUriSignOut = _ref.RedirectUriSignOut,\n      IdentityProvider = _ref.IdentityProvider,\n      UserPoolId = _ref.UserPoolId,\n      AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag,\n      Storage = _ref.Storage,\n      LaunchUri = _ref.LaunchUri;\n    if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n      throw new Error(this.getCognitoConstants().PARAMETERERROR);\n    }\n    this.clientId = ClientId;\n    this.appWebDomain = AppWebDomain;\n    this.TokenScopesArray = TokenScopesArray || [];\n    if (!Array.isArray(TokenScopesArray)) {\n      throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n    }\n    var tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n    this.RedirectUriSignIn = RedirectUriSignIn;\n    this.RedirectUriSignOut = RedirectUriSignOut;\n    this.IdentityProvider = IdentityProvider;\n    this.responseType = this.getCognitoConstants().TOKEN;\n    this.storage = Storage || new StorageHelper().getStorage();\n    this.username = this.getLastUser();\n    this.userPoolId = UserPoolId;\n    this.signInUserSession = this.getCachedSession();\n    this.signInUserSession.setTokenScopes(tokenScopes);\n    this.launchUri = typeof LaunchUri === 'function' ? LaunchUri : launchUri;\n\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true, if no input value is provided.\n     */\n    this.advancedSecurityDataCollectionFlag = true;\n    if (AdvancedSecurityDataCollectionFlag) {\n      this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag;\n    }\n  }\n\n  /**\n   * @returns {JSON} the constants\n   */\n\n  CognitoAuth.prototype.getCognitoConstants = function getCognitoConstants() {\n    var CognitoConstants = {\n      DOMAIN_SCHEME: 'https',\n      DOMAIN_PATH_SIGNIN: 'oauth2/authorize',\n      DOMAIN_PATH_TOKEN: 'oauth2/token',\n      DOMAIN_PATH_SIGNOUT: 'logout',\n      DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n      DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n      DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n      DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER: 'identity_provider',\n      DOMAIN_QUERY_PARAM_USERCONTEXTDATA: 'userContextData',\n      CLIENT_ID: 'client_id',\n      STATE: 'state',\n      SCOPE: 'scope',\n      TOKEN: 'token',\n      CODE: 'code',\n      POST: 'POST',\n      PARAMETERERROR: 'The parameters: App client Id, App web domain' + ', the redirect URL when you are signed in and the ' + 'redirect URL when you are signed out are required.',\n      SCOPETYPEERROR: 'Scopes have to be array type. ',\n      QUESTIONMARK: '?',\n      POUNDSIGN: '#',\n      COLONDOUBLESLASH: '://',\n      SLASH: '/',\n      AMPERSAND: '&',\n      EQUALSIGN: '=',\n      SPACE: ' ',\n      CONTENTTYPE: 'Content-Type',\n      CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n      AUTHORIZATIONCODE: 'authorization_code',\n      IDTOKEN: 'id_token',\n      ACCESSTOKEN: 'access_token',\n      REFRESHTOKEN: 'refresh_token',\n      ERROR: 'error',\n      ERROR_DESCRIPTION: 'error_description',\n      STRINGTYPE: 'string',\n      STATELENGTH: 32,\n      STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n      WITHCREDENTIALS: 'withCredentials',\n      UNDEFINED: 'undefined',\n      HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n      QUERYPARAMETERREGEX1: /#(.+)/,\n      QUERYPARAMETERREGEX2: /=(.+)/,\n      HEADER: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    return CognitoConstants;\n  };\n\n  /**\n   * @returns {string} the client id\n   */\n\n  CognitoAuth.prototype.getClientId = function getClientId() {\n    return this.clientId;\n  };\n\n  /**\n   * @returns {string} the app web domain\n   */\n\n  CognitoAuth.prototype.getAppWebDomain = function getAppWebDomain() {\n    return this.appWebDomain;\n  };\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoAuth} the user retrieved from storage\n   */\n\n  CognitoAuth.prototype.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n    return lastAuthUser;\n  };\n\n  /**\n   * @param {string} Username the user's name\n   * method for setting the current user's name\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.setUser = function setUser(Username) {\n    this.username = Username;\n  };\n\n  /**\n   * sets response type to 'code'\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.useCodeGrantFlow = function useCodeGrantFlow() {\n    this.responseType = this.getCognitoConstants().CODE;\n  };\n\n  /**\n   * sets response type to 'token'\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.useImplicitFlow = function useImplicitFlow() {\n    this.responseType = this.getCognitoConstants().TOKEN;\n  };\n\n  /**\n   * @returns {CognitoAuthSession} the current session for this user\n   */\n\n  CognitoAuth.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n\n  /**\n   * @returns {string} the user's username\n   */\n\n  CognitoAuth.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n\n  /**\n   * @param {string} Username the user's username\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.setUsername = function setUsername(Username) {\n    this.username = Username;\n  };\n\n  /**\n   * @returns {string} the user's state\n   */\n\n  CognitoAuth.prototype.getState = function getState() {\n    return this.state;\n  };\n\n  /**\n   * @param {string} State the user's state\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.setState = function setState(State) {\n    this.state = State;\n  };\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from the local storage, or by using a refresh token\n   * @param {string} RedirectUriSignIn Required: The redirect Uri,\n   * which will be launched after authentication.\n   * @param {array} TokenScopesArray Required: The token scopes, it is an\n   * array of strings specifying all scopes for the tokens.\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.getSession = function getSession() {\n    var tokenScopesInputSet = new Set(this.TokenScopesArray);\n    var cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n    var URL = this.getFQDNSignIn();\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    }\n    this.signInUserSession = this.getCachedSession();\n    // compare scopes\n    if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n      var tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n      var idToken = new CognitoIdToken();\n      var accessToken = new CognitoAccessToken();\n      var refreshToken = new CognitoRefreshToken();\n      this.signInUserSession.setTokenScopes(tokenScopes);\n      this.signInUserSession.setIdToken(idToken);\n      this.signInUserSession.setAccessToken(accessToken);\n      this.signInUserSession.setRefreshToken(refreshToken);\n      this.launchUri(URL);\n    } else if (this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    } else if (!this.signInUserSession.getRefreshToken() || !this.signInUserSession.getRefreshToken().getToken()) {\n      this.launchUri(URL);\n    } else {\n      this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n    }\n    return undefined;\n  };\n\n  /**\n   * @param {string} httpRequestResponse the http request response\n   * @returns {void}\n   * Parse the http request response and proceed according to different response types.\n   */\n\n  CognitoAuth.prototype.parseCognitoWebResponse = function parseCognitoWebResponse(httpRequestResponse) {\n    var map = void 0;\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n      // for code type\n      // this is to avoid a bug exists when sign in with Google or facebook\n      // Sometimes the code will contain a poundsign in the end which breaks the parsing\n      var response = httpRequestResponse.split(this.getCognitoConstants().POUNDSIGN)[0];\n      map = this.getQueryParameters(response, this.getCognitoConstants().QUESTIONMARK);\n      if (map.has(this.getCognitoConstants().ERROR)) {\n        return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n      }\n      this.getCodeQueryParameter(map);\n    } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n      // for token type\n      map = this.getQueryParameters(httpRequestResponse, this.getCognitoConstants().QUERYPARAMETERREGEX1);\n      if (map.has(this.getCognitoConstants().ERROR)) {\n        return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n      }\n      // To use the map to get tokens\n      this.getTokenQueryParameter(map);\n    }\n  };\n\n  /**\n   * @param {map} Query parameter map \n   * @returns {void}\n   * Get the query parameter map and proceed according to code response type.\n   */\n\n  CognitoAuth.prototype.getCodeQueryParameter = function getCodeQueryParameter(map) {\n    var state = null;\n    if (map.has(this.getCognitoConstants().STATE)) {\n      this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n    } else {\n      this.signInUserSession.setState(state);\n    }\n    if (map.has(this.getCognitoConstants().CODE)) {\n      // if the response contains code\n      // To parse the response and get the code value.\n      var codeParameter = map.get(this.getCognitoConstants().CODE);\n      var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n      var header = this.getCognitoConstants().HEADER;\n      var body = {\n        grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n        client_id: this.getClientId(),\n        redirect_uri: this.RedirectUriSignIn,\n        code: codeParameter\n      };\n      var boundOnSuccess = this.onSuccessExchangeForToken.bind(this);\n      var boundOnFailure = this.onFailure.bind(this);\n      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n    }\n  };\n\n  /**\n   * Get the query parameter map and proceed according to token response type.\n   * @param {map} Query parameter map \n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.getTokenQueryParameter = function getTokenQueryParameter(map) {\n    var idToken = new CognitoIdToken();\n    var accessToken = new CognitoAccessToken();\n    var refreshToken = new CognitoRefreshToken();\n    var state = null;\n    if (map.has(this.getCognitoConstants().IDTOKEN)) {\n      idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n      this.signInUserSession.setIdToken(idToken);\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (map.has(this.getCognitoConstants().ACCESSTOKEN)) {\n      accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n      this.signInUserSession.setAccessToken(accessToken);\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (map.has(this.getCognitoConstants().STATE)) {\n      this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n    } else {\n      this.signInUserSession.setState(state);\n    }\n    this.cacheTokensScopes();\n    this.userhandler.onSuccess(this.signInUserSession);\n  };\n\n  /**\n   * Get cached tokens and scopes and return a new session using all the cached data.\n   * @returns {CognitoAuthSession} the auth session\n   */\n\n  CognitoAuth.prototype.getCachedSession = function getCachedSession() {\n    if (!this.username) {\n      return new CognitoAuthSession();\n    }\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var scopeKey = keyPrefix + '.tokenScopesString';\n    var scopesString = this.storage.getItem(scopeKey);\n    var scopesArray = [];\n    if (scopesString) {\n      scopesArray = scopesString.split(' ');\n    }\n    var tokenScopes = new CognitoTokenScopes(scopesArray);\n    var idToken = new CognitoIdToken(this.storage.getItem(idTokenKey));\n    var accessToken = new CognitoAccessToken(this.storage.getItem(accessTokenKey));\n    var refreshToken = new CognitoRefreshToken(this.storage.getItem(refreshTokenKey));\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n      TokenScopes: tokenScopes\n    };\n    var cachedSession = new CognitoAuthSession(sessionData);\n    return cachedSession;\n  };\n\n  /**\n   * This is used to get last signed in user from local storage\n   * @returns {string} the last user name\n   */\n\n  CognitoAuth.prototype.getLastUser = function getLastUser() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var lastUserName = this.storage.getItem(lastUserKey);\n    if (lastUserName) {\n      return lastUserName;\n    }\n    return undefined;\n  };\n\n  /**\n   * This is used to save the session tokens and scopes to local storage\n   * Input parameter is a set of strings.\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.cacheTokensScopes = function cacheTokensScopes() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n    this.username = tokenUserName;\n    var idTokenKey = keyPrefix + '.' + tokenUserName + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + tokenUserName + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + tokenUserName + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var scopeKey = keyPrefix + '.' + tokenUserName + '.tokenScopesString';\n    var scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n    var scopesString = scopesArray.join(' ');\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(lastUserKey, tokenUserName);\n    this.storage.setItem(scopeKey, scopesString);\n  };\n\n  /**\n   * Compare two sets if they are identical.\n   * @param {set} set1 one set\n   * @param {set} set2 the other set\n   * @returns {boolean} boolean value is true if two sets are identical\n   */\n\n  CognitoAuth.prototype.compareSets = function compareSets(set1, set2) {\n    if (set1.size !== set2.size) {\n      return false;\n    }\n    for (var _iterator = set1, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref2;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n      var item = _ref2;\n      if (!set2.has(item)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * @param {string} url the url string\n   * Get the hostname from url.\n   * @returns {string} hostname string\n   */\n\n  CognitoAuth.prototype.getHostName = function getHostName(url) {\n    var match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n    if (match != null && match.length > 2 && _typeof(match[2]) === this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n      return match[2];\n    }\n    return undefined;\n  };\n\n  /**\n   * Get http query parameters and return them as a map.\n   * @param {string} url the url string\n   * @param {string} splitMark query parameters split mark (prefix)\n   * @returns {map} map\n   */\n\n  CognitoAuth.prototype.getQueryParameters = function getQueryParameters(url, splitMark) {\n    var str = String(url).split(splitMark);\n    var url2 = str[1];\n    var str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n    var num = str1.length;\n    var map = new Map();\n    var i = void 0;\n    for (i = 0; i < num; i++) {\n      str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n      map.set(str1[i][0], str1[i][1]);\n    }\n    return map;\n  };\n  CognitoAuth.prototype._bufferToString = function _bufferToString(buffer, chars) {\n    var state = [];\n    for (var i = 0; i < buffer.byteLength; i += 1) {\n      var index = buffer[i] % chars.length;\n      state.push(chars[index]);\n    }\n    return state.join(\"\");\n  };\n\n  /**\n   * helper function to generate a random string\n   * @param {int} length the length of string\n   * @param {string} chars a original string\n   * @returns {string} a random value.\n   */\n\n  CognitoAuth.prototype.generateRandomString = function generateRandomString(length, chars) {\n    var buffer = new Uint8Array(length);\n    if (typeof window !== \"undefined\" && !!window.crypto) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      for (var i = 0; i < length; i += 1) {\n        buffer[i] = Math.random() * chars.length | 0;\n      }\n    }\n    return this._bufferToString(buffer, chars);\n  };\n\n  /**\n   * This is used to clear the session tokens and scopes from local storage\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.clearCachedTokensScopes = function clearCachedTokensScopes() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var scopeKey = keyPrefix + '.' + this.username + '.tokenScopesString';\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(scopeKey);\n  };\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} refreshToken authResult Successful auth response from server.\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.refreshSession = function refreshSession(refreshToken) {\n    // https POST call for refreshing token\n    var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n    var header = this.getCognitoConstants().HEADER;\n    var body = {\n      grant_type: this.getCognitoConstants().REFRESHTOKEN,\n      client_id: this.getClientId(),\n      redirect_uri: this.RedirectUriSignIn,\n      refresh_token: refreshToken\n    };\n    var boundOnSuccess = this.onSuccessRefreshToken.bind(this);\n    var boundOnFailure = this.onFailure.bind(this);\n    this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n  };\n\n  /**\n   * Make the http POST request.\n   * @param {JSON} header header JSON object\n   * @param {JSON} body body JSON object\n   * @param {string} url string\n   * @param {function} onSuccess callback\n   * @param {function} onFailure callback\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.makePOSTRequest = function makePOSTRequest(header, body, url, onSuccess, onFailure) {\n    // This is a sample server that supports CORS.\n    var xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n    var bodyString = '';\n    if (!xhr) {\n      return;\n    }\n    // set header\n    for (var key in header) {\n      xhr.setRequestHeader(key, header[key]);\n    }\n    for (var _key in body) {\n      bodyString = bodyString.concat(_key, this.getCognitoConstants().EQUALSIGN, body[_key], this.getCognitoConstants().AMPERSAND);\n    }\n    bodyString = bodyString.substring(0, bodyString.length - 1);\n    xhr.send(bodyString);\n    xhr.onreadystatechange = function addressState() {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          onSuccess(xhr.responseText);\n        } else {\n          onFailure(xhr.responseText);\n        }\n      }\n    };\n  };\n\n  /**\n   * Create the XHR object\n   * @param {string} method which method to call\n   * @param {string} url the url string\n   * @returns {object} xhr\n   */\n\n  CognitoAuth.prototype.createCORSRequest = function createCORSRequest(method, url) {\n    var xhr = new XMLHttpRequest();\n    if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n      // XHR for Chrome/Firefox/Opera/Safari.\n      xhr.open(method, url, true);\n    } else if ((typeof XDomainRequest === 'undefined' ? 'undefined' : _typeof(XDomainRequest)) !== this.getCognitoConstants().UNDEFINED) {\n      // XDomainRequest for IE.\n      xhr = new XDomainRequest();\n      xhr.open(method, url);\n    } else {\n      // CORS not supported.\n      xhr = null;\n    }\n    return xhr;\n  };\n\n  /**\n   * The http POST request onFailure callback.\n   * @param {object} err the error object\n   * @returns {function} onFailure\n   */\n\n  CognitoAuth.prototype.onFailure = function onFailure(err) {\n    this.userhandler.onFailure(err);\n  };\n\n  /**\n   * The http POST request onSuccess callback when refreshing tokens.\n   * @param {JSON} jsonData tokens\n   */\n\n  CognitoAuth.prototype.onSuccessRefreshToken = function onSuccessRefreshToken(jsonData) {\n    var jsonDataObject = JSON.parse(jsonData);\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n      var URL = this.getFQDNSignIn();\n      this.launchUri(URL);\n    } else {\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n        this.signInUserSession.setIdToken(new CognitoIdToken(jsonDataObject.id_token));\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n        this.signInUserSession.setAccessToken(new CognitoAccessToken(jsonDataObject.access_token));\n      }\n      this.cacheTokensScopes();\n      this.userhandler.onSuccess(this.signInUserSession);\n    }\n  };\n\n  /**\n   * The http POST request onSuccess callback when exchanging code for tokens.\n   * @param {JSON} jsonData tokens\n   */\n\n  CognitoAuth.prototype.onSuccessExchangeForToken = function onSuccessExchangeForToken(jsonData) {\n    var jsonDataObject = JSON.parse(jsonData);\n    var refreshToken = new CognitoRefreshToken();\n    var accessToken = new CognitoAccessToken();\n    var idToken = new CognitoIdToken();\n    var state = null;\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n      return this.userhandler.onFailure(jsonData);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n      this.signInUserSession.setIdToken(new CognitoIdToken(jsonDataObject.id_token));\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n      this.signInUserSession.setAccessToken(new CognitoAccessToken(jsonDataObject.access_token));\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().REFRESHTOKEN)) {\n      this.signInUserSession.setRefreshToken(new CognitoRefreshToken(jsonDataObject.refresh_token));\n    } else {\n      this.signInUserSession.setRefreshToken(refreshToken);\n    }\n    this.cacheTokensScopes();\n    this.userhandler.onSuccess(this.signInUserSession);\n  };\n\n  /**\n   * Launch Cognito Auth UI page.\n   * @param {string} URL the url to launch\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.launchUri = function launchUri() {};\n\n  // overwritten in constructor\n\n  /**\n   * @returns {string} scopes string\n   */\n  CognitoAuth.prototype.getSpaceSeperatedScopeString = function getSpaceSeperatedScopeString() {\n    var tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n    tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n    return encodeURIComponent(tokenScopesString);\n  };\n\n  /**\n   * Create the FQDN(fully qualified domain name) for authorization endpoint.\n   * @returns {string} url\n   */\n\n  CognitoAuth.prototype.getFQDNSignIn = function getFQDNSignIn() {\n    if (this.state == null) {\n      this.state = this.generateRandomString(this.getCognitoConstants().STATELENGTH, this.getCognitoConstants().STATEORIGINSTRING);\n    }\n    var identityProviderParam = this.IdentityProvider ? this.getCognitoConstants().AMPERSAND.concat(this.getCognitoConstants().DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER, this.getCognitoConstants().EQUALSIGN, this.IdentityProvider) : '';\n    var tokenScopesString = this.getSpaceSeperatedScopeString();\n    var userContextDataParam = '';\n    var userContextData = this.getUserContextData();\n    if (userContextData) {\n      userContextDataParam = this.getCognitoConstants().AMPERSAND + this.getCognitoConstants().DOMAIN_QUERY_PARAM_USERCONTEXTDATA + this.getCognitoConstants().EQUALSIGN + this.getUserContextData();\n    }\n\n    // Build the complete web domain to launch the login screen\n    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE, this.getCognitoConstants().EQUALSIGN, this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId(), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE, this.getCognitoConstants().EQUALSIGN, this.state, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString, identityProviderParam, userContextDataParam);\n    return uri;\n  };\n\n  /**\n   * Sign out the user.\n   * @returns {void}\n   */\n\n  CognitoAuth.prototype.signOut = function signOut() {\n    var URL = this.getFQDNSignOut();\n    this.signInUserSession = null;\n    this.clearCachedTokensScopes();\n    this.launchUri(URL);\n  };\n\n  /**\n   * Create the FQDN(fully qualified domain name) for signout endpoint.\n   * @returns {string} url\n   */\n\n  CognitoAuth.prototype.getFQDNSignOut = function getFQDNSignOut() {\n    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId());\n    return uri;\n  };\n\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   **/\n\n  CognitoAuth.prototype.getUserContextData = function getUserContextData() {\n    if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n      return;\n    }\n    var _username = \"\";\n    if (this.username) {\n      _username = this.username;\n    }\n    var _userpoolId = \"\";\n    if (this.userpoolId) {\n      _userpoolId = this.userpoolId;\n    }\n    if (this.advancedSecurityDataCollectionFlag) {\n      return AmazonCognitoAdvancedSecurityData.getData(_username, _userpoolId, this.clientId);\n    }\n  };\n\n  /**\n   * Helper method to let the user know if he has either a valid cached session \n   * or a valid authenticated session from the app integration callback.\n   * @returns {boolean} userSignedIn \n   */\n\n  CognitoAuth.prototype.isUserSignedIn = function isUserSignedIn() {\n    return this.signInUserSession != null && this.signInUserSession.isValid() || this.getCachedSession() != null && this.getCachedSession().isValid();\n  };\n  return CognitoAuth;\n}();\nexport default CognitoAuth;","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","CognitoTokenScopes","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoAuthSession","StorageHelper","launchUri","CognitoAuth","data","_ref","ClientId","AppWebDomain","TokenScopesArray","RedirectUriSignIn","RedirectUriSignOut","IdentityProvider","UserPoolId","AdvancedSecurityDataCollectionFlag","Storage","LaunchUri","Error","getCognitoConstants","PARAMETERERROR","clientId","appWebDomain","Array","isArray","SCOPETYPEERROR","tokenScopes","responseType","TOKEN","storage","getStorage","username","getLastUser","userPoolId","signInUserSession","getCachedSession","setTokenScopes","advancedSecurityDataCollectionFlag","CognitoConstants","DOMAIN_SCHEME","DOMAIN_PATH_SIGNIN","DOMAIN_PATH_TOKEN","DOMAIN_PATH_SIGNOUT","DOMAIN_QUERY_PARAM_REDIRECT_URI","DOMAIN_QUERY_PARAM_SIGNOUT_URI","DOMAIN_QUERY_PARAM_RESPONSE_TYPE","DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER","DOMAIN_QUERY_PARAM_USERCONTEXTDATA","CLIENT_ID","STATE","SCOPE","CODE","POST","QUESTIONMARK","POUNDSIGN","COLONDOUBLESLASH","SLASH","AMPERSAND","EQUALSIGN","SPACE","CONTENTTYPE","CONTENTTYPEVALUE","AUTHORIZATIONCODE","IDTOKEN","ACCESSTOKEN","REFRESHTOKEN","ERROR","ERROR_DESCRIPTION","STRINGTYPE","STATELENGTH","STATEORIGINSTRING","WITHCREDENTIALS","UNDEFINED","HOSTNAMEREGEX","QUERYPARAMETERREGEX1","QUERYPARAMETERREGEX2","HEADER","getClientId","getAppWebDomain","getCurrentUser","lastUserKey","lastAuthUser","getItem","setUser","Username","useCodeGrantFlow","useImplicitFlow","getSignInUserSession","getUsername","setUsername","getState","state","setState","State","getSession","tokenScopesInputSet","Set","cachedScopesSet","getScopes","URL","getFQDNSignIn","isValid","userhandler","onSuccess","compareSets","idToken","accessToken","refreshToken","setIdToken","setAccessToken","setRefreshToken","getRefreshToken","getToken","refreshSession","undefined","parseCognitoWebResponse","httpRequestResponse","map","indexOf","response","split","getQueryParameters","has","onFailure","get","getCodeQueryParameter","getTokenQueryParameter","codeParameter","url","concat","header","body","grant_type","client_id","redirect_uri","code","boundOnSuccess","onSuccessExchangeForToken","bind","boundOnFailure","makePOSTRequest","setJwtToken","cacheTokensScopes","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","scopeKey","scopesString","scopesArray","sessionData","IdToken","AccessToken","RefreshToken","TokenScopes","cachedSession","lastUserName","tokenUserName","getAccessToken","getTokenScopes","join","setItem","getIdToken","getJwtToken","set1","set2","size","_iterator","_isArray","_i","_ref2","length","next","done","value","item","getHostName","match","splitMark","str","String","url2","str1","num","Map","i","set","_bufferToString","buffer","chars","byteLength","index","push","generateRandomString","Uint8Array","window","crypto","getRandomValues","Math","random","clearCachedTokensScopes","removeItem","refresh_token","onSuccessRefreshToken","xhr","createCORSRequest","bodyString","key","setRequestHeader","_key","substring","send","onreadystatechange","addressState","readyState","status","responseText","method","XMLHttpRequest","open","XDomainRequest","err","jsonData","jsonDataObject","JSON","parse","Object","hasOwnProperty","call","id_token","access_token","getSpaceSeperatedScopeString","tokenScopesString","encodeURIComponent","identityProviderParam","userContextDataParam","userContextData","getUserContextData","uri","signOut","getFQDNSignOut","AmazonCognitoAdvancedSecurityData","_username","_userpoolId","userpoolId","getData","isUserSignedIn"],"sources":["/Users/mohsinidrees/Desktop/cognito_project/frontend/node_modules/amazon-cognito-auth-js/es/CognitoAuth.js"],"sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n  * Amazon Cognito Auth SDK for JavaScript\n  * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\").\n  * You may not use this file except in compliance with the License.\n  * A copy of the License is located at\n  *\n  *         http://aws.amazon.com/apache2.0/\n  *\n  * or in the \"license\" file accompanying this file.\n  * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n  * OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions\n  * and limitations under the License.\n  */\n\nimport CognitoTokenScopes from './CognitoTokenScopes';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoAuthSession from './CognitoAuthSession';\nimport StorageHelper from './StorageHelper';\nimport { launchUri } from './UriHelper';\n\n/** @class */\n\nvar CognitoAuth = function () {\n  /**\n   * Constructs a new CognitoAuth object\n   * @param {object} data Creation options\n   * @param {string} data.ClientId Required: User pool application client id.\n   * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n   *                     this is set at the Cognito console.\n   * @param {array} data.TokenScopesArray Optional: The token scopes\n   * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n   * which will be launched after authentication as signed in.\n   * @param {string} data.RedirectUriSignOut Required:\n   * The redirect Uri, which will be launched when signed out.\n   * @param {string} data.IdentityProvider Optional: Pre-selected identity provider (this allows to\n   * automatically trigger social provider authentication flow).\n   * @param {string} data.UserPoolId Optional: UserPoolId for the configured cognito userPool.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional: boolean flag indicating if the\n   *        data collection is enabled to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   * @param {object} data.Storage Optional: e.g. new CookieStorage(), to use the specified storage provided\n   * @param {function} data.LaunchUri Optional: Function to open a url, by default uses window.open in browser, Linking.openUrl in React Native\n   * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n   */\n  function CognitoAuth(data) {\n    _classCallCheck(this, CognitoAuth);\n\n    var _ref = data || {},\n        ClientId = _ref.ClientId,\n        AppWebDomain = _ref.AppWebDomain,\n        TokenScopesArray = _ref.TokenScopesArray,\n        RedirectUriSignIn = _ref.RedirectUriSignIn,\n        RedirectUriSignOut = _ref.RedirectUriSignOut,\n        IdentityProvider = _ref.IdentityProvider,\n        UserPoolId = _ref.UserPoolId,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag,\n        Storage = _ref.Storage,\n        LaunchUri = _ref.LaunchUri;\n\n    if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n      throw new Error(this.getCognitoConstants().PARAMETERERROR);\n    }\n\n    this.clientId = ClientId;\n    this.appWebDomain = AppWebDomain;\n    this.TokenScopesArray = TokenScopesArray || [];\n    if (!Array.isArray(TokenScopesArray)) {\n      throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n    }\n    var tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n    this.RedirectUriSignIn = RedirectUriSignIn;\n    this.RedirectUriSignOut = RedirectUriSignOut;\n    this.IdentityProvider = IdentityProvider;\n    this.responseType = this.getCognitoConstants().TOKEN;\n    this.storage = Storage || new StorageHelper().getStorage();\n    this.username = this.getLastUser();\n    this.userPoolId = UserPoolId;\n    this.signInUserSession = this.getCachedSession();\n    this.signInUserSession.setTokenScopes(tokenScopes);\n    this.launchUri = typeof LaunchUri === 'function' ? LaunchUri : launchUri;\n\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true, if no input value is provided.\n     */\n    this.advancedSecurityDataCollectionFlag = true;\n    if (AdvancedSecurityDataCollectionFlag) {\n      this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag;\n    }\n  }\n\n  /**\n   * @returns {JSON} the constants\n   */\n\n\n  CognitoAuth.prototype.getCognitoConstants = function getCognitoConstants() {\n    var CognitoConstants = {\n      DOMAIN_SCHEME: 'https',\n      DOMAIN_PATH_SIGNIN: 'oauth2/authorize',\n      DOMAIN_PATH_TOKEN: 'oauth2/token',\n      DOMAIN_PATH_SIGNOUT: 'logout',\n      DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n      DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n      DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n      DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER: 'identity_provider',\n      DOMAIN_QUERY_PARAM_USERCONTEXTDATA: 'userContextData',\n      CLIENT_ID: 'client_id',\n      STATE: 'state',\n      SCOPE: 'scope',\n      TOKEN: 'token',\n      CODE: 'code',\n      POST: 'POST',\n      PARAMETERERROR: 'The parameters: App client Id, App web domain' + ', the redirect URL when you are signed in and the ' + 'redirect URL when you are signed out are required.',\n      SCOPETYPEERROR: 'Scopes have to be array type. ',\n      QUESTIONMARK: '?',\n      POUNDSIGN: '#',\n      COLONDOUBLESLASH: '://',\n      SLASH: '/',\n      AMPERSAND: '&',\n      EQUALSIGN: '=',\n      SPACE: ' ',\n      CONTENTTYPE: 'Content-Type',\n      CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n      AUTHORIZATIONCODE: 'authorization_code',\n      IDTOKEN: 'id_token',\n      ACCESSTOKEN: 'access_token',\n      REFRESHTOKEN: 'refresh_token',\n      ERROR: 'error',\n      ERROR_DESCRIPTION: 'error_description',\n      STRINGTYPE: 'string',\n      STATELENGTH: 32,\n      STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n      WITHCREDENTIALS: 'withCredentials',\n      UNDEFINED: 'undefined',\n      HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n      QUERYPARAMETERREGEX1: /#(.+)/,\n      QUERYPARAMETERREGEX2: /=(.+)/,\n      HEADER: { 'Content-Type': 'application/x-www-form-urlencoded' }\n    };\n    return CognitoConstants;\n  };\n\n  /**\n   * @returns {string} the client id\n   */\n\n\n  CognitoAuth.prototype.getClientId = function getClientId() {\n    return this.clientId;\n  };\n\n  /**\n   * @returns {string} the app web domain\n   */\n\n\n  CognitoAuth.prototype.getAppWebDomain = function getAppWebDomain() {\n    return this.appWebDomain;\n  };\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoAuth} the user retrieved from storage\n   */\n\n\n  CognitoAuth.prototype.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n    return lastAuthUser;\n  };\n\n  /**\n   * @param {string} Username the user's name\n   * method for setting the current user's name\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.setUser = function setUser(Username) {\n    this.username = Username;\n  };\n\n  /**\n   * sets response type to 'code'\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.useCodeGrantFlow = function useCodeGrantFlow() {\n    this.responseType = this.getCognitoConstants().CODE;\n  };\n\n  /**\n   * sets response type to 'token'\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.useImplicitFlow = function useImplicitFlow() {\n    this.responseType = this.getCognitoConstants().TOKEN;\n  };\n\n  /**\n   * @returns {CognitoAuthSession} the current session for this user\n   */\n\n\n  CognitoAuth.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n\n  /**\n   * @returns {string} the user's username\n   */\n\n\n  CognitoAuth.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n\n  /**\n   * @param {string} Username the user's username\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.setUsername = function setUsername(Username) {\n    this.username = Username;\n  };\n\n  /**\n   * @returns {string} the user's state\n   */\n\n\n  CognitoAuth.prototype.getState = function getState() {\n    return this.state;\n  };\n\n  /**\n   * @param {string} State the user's state\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.setState = function setState(State) {\n    this.state = State;\n  };\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from the local storage, or by using a refresh token\n   * @param {string} RedirectUriSignIn Required: The redirect Uri,\n   * which will be launched after authentication.\n   * @param {array} TokenScopesArray Required: The token scopes, it is an\n   * array of strings specifying all scopes for the tokens.\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.getSession = function getSession() {\n    var tokenScopesInputSet = new Set(this.TokenScopesArray);\n    var cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n    var URL = this.getFQDNSignIn();\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    }\n    this.signInUserSession = this.getCachedSession();\n    // compare scopes\n    if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n      var tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n      var idToken = new CognitoIdToken();\n      var accessToken = new CognitoAccessToken();\n      var refreshToken = new CognitoRefreshToken();\n      this.signInUserSession.setTokenScopes(tokenScopes);\n      this.signInUserSession.setIdToken(idToken);\n      this.signInUserSession.setAccessToken(accessToken);\n      this.signInUserSession.setRefreshToken(refreshToken);\n      this.launchUri(URL);\n    } else if (this.signInUserSession.isValid()) {\n      return this.userhandler.onSuccess(this.signInUserSession);\n    } else if (!this.signInUserSession.getRefreshToken() || !this.signInUserSession.getRefreshToken().getToken()) {\n      this.launchUri(URL);\n    } else {\n      this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n    }\n    return undefined;\n  };\n\n  /**\n   * @param {string} httpRequestResponse the http request response\n   * @returns {void}\n   * Parse the http request response and proceed according to different response types.\n   */\n\n\n  CognitoAuth.prototype.parseCognitoWebResponse = function parseCognitoWebResponse(httpRequestResponse) {\n    var map = void 0;\n    if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n      // for code type\n      // this is to avoid a bug exists when sign in with Google or facebook\n      // Sometimes the code will contain a poundsign in the end which breaks the parsing\n      var response = httpRequestResponse.split(this.getCognitoConstants().POUNDSIGN)[0];\n      map = this.getQueryParameters(response, this.getCognitoConstants().QUESTIONMARK);\n      if (map.has(this.getCognitoConstants().ERROR)) {\n        return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n      }\n      this.getCodeQueryParameter(map);\n    } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n      // for token type\n      map = this.getQueryParameters(httpRequestResponse, this.getCognitoConstants().QUERYPARAMETERREGEX1);\n      if (map.has(this.getCognitoConstants().ERROR)) {\n        return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n      }\n      // To use the map to get tokens\n      this.getTokenQueryParameter(map);\n    }\n  };\n\n  /**\n   * @param {map} Query parameter map \n   * @returns {void}\n   * Get the query parameter map and proceed according to code response type.\n   */\n\n\n  CognitoAuth.prototype.getCodeQueryParameter = function getCodeQueryParameter(map) {\n    var state = null;\n    if (map.has(this.getCognitoConstants().STATE)) {\n      this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n    } else {\n      this.signInUserSession.setState(state);\n    }\n\n    if (map.has(this.getCognitoConstants().CODE)) {\n      // if the response contains code\n      // To parse the response and get the code value.\n      var codeParameter = map.get(this.getCognitoConstants().CODE);\n      var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n      var header = this.getCognitoConstants().HEADER;\n      var body = { grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n        client_id: this.getClientId(),\n        redirect_uri: this.RedirectUriSignIn,\n        code: codeParameter };\n      var boundOnSuccess = this.onSuccessExchangeForToken.bind(this);\n      var boundOnFailure = this.onFailure.bind(this);\n      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n    }\n  };\n\n  /**\n   * Get the query parameter map and proceed according to token response type.\n   * @param {map} Query parameter map \n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.getTokenQueryParameter = function getTokenQueryParameter(map) {\n    var idToken = new CognitoIdToken();\n    var accessToken = new CognitoAccessToken();\n    var refreshToken = new CognitoRefreshToken();\n    var state = null;\n    if (map.has(this.getCognitoConstants().IDTOKEN)) {\n      idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n      this.signInUserSession.setIdToken(idToken);\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (map.has(this.getCognitoConstants().ACCESSTOKEN)) {\n      accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n      this.signInUserSession.setAccessToken(accessToken);\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (map.has(this.getCognitoConstants().STATE)) {\n      this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n    } else {\n      this.signInUserSession.setState(state);\n    }\n    this.cacheTokensScopes();\n    this.userhandler.onSuccess(this.signInUserSession);\n  };\n\n  /**\n   * Get cached tokens and scopes and return a new session using all the cached data.\n   * @returns {CognitoAuthSession} the auth session\n   */\n\n\n  CognitoAuth.prototype.getCachedSession = function getCachedSession() {\n    if (!this.username) {\n      return new CognitoAuthSession();\n    }\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var scopeKey = keyPrefix + '.tokenScopesString';\n\n    var scopesString = this.storage.getItem(scopeKey);\n    var scopesArray = [];\n    if (scopesString) {\n      scopesArray = scopesString.split(' ');\n    }\n    var tokenScopes = new CognitoTokenScopes(scopesArray);\n    var idToken = new CognitoIdToken(this.storage.getItem(idTokenKey));\n    var accessToken = new CognitoAccessToken(this.storage.getItem(accessTokenKey));\n    var refreshToken = new CognitoRefreshToken(this.storage.getItem(refreshTokenKey));\n\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n      TokenScopes: tokenScopes\n    };\n    var cachedSession = new CognitoAuthSession(sessionData);\n    return cachedSession;\n  };\n\n  /**\n   * This is used to get last signed in user from local storage\n   * @returns {string} the last user name\n   */\n\n\n  CognitoAuth.prototype.getLastUser = function getLastUser() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var lastUserName = this.storage.getItem(lastUserKey);\n    if (lastUserName) {\n      return lastUserName;\n    }\n    return undefined;\n  };\n\n  /**\n   * This is used to save the session tokens and scopes to local storage\n   * Input parameter is a set of strings.\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.cacheTokensScopes = function cacheTokensScopes() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n    this.username = tokenUserName;\n    var idTokenKey = keyPrefix + '.' + tokenUserName + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + tokenUserName + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + tokenUserName + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var scopeKey = keyPrefix + '.' + tokenUserName + '.tokenScopesString';\n    var scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n    var scopesString = scopesArray.join(' ');\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(lastUserKey, tokenUserName);\n    this.storage.setItem(scopeKey, scopesString);\n  };\n\n  /**\n   * Compare two sets if they are identical.\n   * @param {set} set1 one set\n   * @param {set} set2 the other set\n   * @returns {boolean} boolean value is true if two sets are identical\n   */\n\n\n  CognitoAuth.prototype.compareSets = function compareSets(set1, set2) {\n    if (set1.size !== set2.size) {\n      return false;\n    }\n    for (var _iterator = set1, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref2 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref2 = _i.value;\n      }\n\n      var item = _ref2;\n\n      if (!set2.has(item)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * @param {string} url the url string\n   * Get the hostname from url.\n   * @returns {string} hostname string\n   */\n\n\n  CognitoAuth.prototype.getHostName = function getHostName(url) {\n    var match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n    if (match != null && match.length > 2 && _typeof(match[2]) === this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n      return match[2];\n    }\n    return undefined;\n  };\n\n  /**\n   * Get http query parameters and return them as a map.\n   * @param {string} url the url string\n   * @param {string} splitMark query parameters split mark (prefix)\n   * @returns {map} map\n   */\n\n\n  CognitoAuth.prototype.getQueryParameters = function getQueryParameters(url, splitMark) {\n    var str = String(url).split(splitMark);\n    var url2 = str[1];\n    var str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n    var num = str1.length;\n    var map = new Map();\n    var i = void 0;\n    for (i = 0; i < num; i++) {\n      str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n      map.set(str1[i][0], str1[i][1]);\n    }\n    return map;\n  };\n\n  CognitoAuth.prototype._bufferToString = function _bufferToString(buffer, chars) {\n    var state = [];\n    for (var i = 0; i < buffer.byteLength; i += 1) {\n      var index = buffer[i] % chars.length;\n      state.push(chars[index]);\n    }\n    return state.join(\"\");\n  };\n\n  /**\n   * helper function to generate a random string\n   * @param {int} length the length of string\n   * @param {string} chars a original string\n   * @returns {string} a random value.\n   */\n\n\n  CognitoAuth.prototype.generateRandomString = function generateRandomString(length, chars) {\n    var buffer = new Uint8Array(length);\n\n    if (typeof window !== \"undefined\" && !!window.crypto) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      for (var i = 0; i < length; i += 1) {\n        buffer[i] = Math.random() * chars.length | 0;\n      }\n    }\n    return this._bufferToString(buffer, chars);\n  };\n\n  /**\n   * This is used to clear the session tokens and scopes from local storage\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.clearCachedTokensScopes = function clearCachedTokensScopes() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var scopeKey = keyPrefix + '.' + this.username + '.tokenScopesString';\n\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(scopeKey);\n  };\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} refreshToken authResult Successful auth response from server.\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.refreshSession = function refreshSession(refreshToken) {\n    // https POST call for refreshing token\n    var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n    var header = this.getCognitoConstants().HEADER;\n    var body = { grant_type: this.getCognitoConstants().REFRESHTOKEN,\n      client_id: this.getClientId(),\n      redirect_uri: this.RedirectUriSignIn,\n      refresh_token: refreshToken };\n    var boundOnSuccess = this.onSuccessRefreshToken.bind(this);\n    var boundOnFailure = this.onFailure.bind(this);\n    this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n  };\n\n  /**\n   * Make the http POST request.\n   * @param {JSON} header header JSON object\n   * @param {JSON} body body JSON object\n   * @param {string} url string\n   * @param {function} onSuccess callback\n   * @param {function} onFailure callback\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.makePOSTRequest = function makePOSTRequest(header, body, url, onSuccess, onFailure) {\n    // This is a sample server that supports CORS.\n    var xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n    var bodyString = '';\n    if (!xhr) {\n      return;\n    }\n    // set header\n    for (var key in header) {\n      xhr.setRequestHeader(key, header[key]);\n    }\n    for (var _key in body) {\n      bodyString = bodyString.concat(_key, this.getCognitoConstants().EQUALSIGN, body[_key], this.getCognitoConstants().AMPERSAND);\n    }\n    bodyString = bodyString.substring(0, bodyString.length - 1);\n    xhr.send(bodyString);\n    xhr.onreadystatechange = function addressState() {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          onSuccess(xhr.responseText);\n        } else {\n          onFailure(xhr.responseText);\n        }\n      }\n    };\n  };\n\n  /**\n   * Create the XHR object\n   * @param {string} method which method to call\n   * @param {string} url the url string\n   * @returns {object} xhr\n   */\n\n\n  CognitoAuth.prototype.createCORSRequest = function createCORSRequest(method, url) {\n    var xhr = new XMLHttpRequest();\n    if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n      // XHR for Chrome/Firefox/Opera/Safari.\n      xhr.open(method, url, true);\n    } else if ((typeof XDomainRequest === 'undefined' ? 'undefined' : _typeof(XDomainRequest)) !== this.getCognitoConstants().UNDEFINED) {\n      // XDomainRequest for IE.\n      xhr = new XDomainRequest();\n      xhr.open(method, url);\n    } else {\n      // CORS not supported.\n      xhr = null;\n    }\n    return xhr;\n  };\n\n  /**\n   * The http POST request onFailure callback.\n   * @param {object} err the error object\n   * @returns {function} onFailure\n   */\n\n\n  CognitoAuth.prototype.onFailure = function onFailure(err) {\n    this.userhandler.onFailure(err);\n  };\n\n  /**\n   * The http POST request onSuccess callback when refreshing tokens.\n   * @param {JSON} jsonData tokens\n   */\n\n\n  CognitoAuth.prototype.onSuccessRefreshToken = function onSuccessRefreshToken(jsonData) {\n    var jsonDataObject = JSON.parse(jsonData);\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n      var URL = this.getFQDNSignIn();\n      this.launchUri(URL);\n    } else {\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n        this.signInUserSession.setIdToken(new CognitoIdToken(jsonDataObject.id_token));\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n        this.signInUserSession.setAccessToken(new CognitoAccessToken(jsonDataObject.access_token));\n      }\n      this.cacheTokensScopes();\n      this.userhandler.onSuccess(this.signInUserSession);\n    }\n  };\n\n  /**\n   * The http POST request onSuccess callback when exchanging code for tokens.\n   * @param {JSON} jsonData tokens\n   */\n\n\n  CognitoAuth.prototype.onSuccessExchangeForToken = function onSuccessExchangeForToken(jsonData) {\n    var jsonDataObject = JSON.parse(jsonData);\n    var refreshToken = new CognitoRefreshToken();\n    var accessToken = new CognitoAccessToken();\n    var idToken = new CognitoIdToken();\n    var state = null;\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n      return this.userhandler.onFailure(jsonData);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n      this.signInUserSession.setIdToken(new CognitoIdToken(jsonDataObject.id_token));\n    } else {\n      this.signInUserSession.setIdToken(idToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n      this.signInUserSession.setAccessToken(new CognitoAccessToken(jsonDataObject.access_token));\n    } else {\n      this.signInUserSession.setAccessToken(accessToken);\n    }\n    if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().REFRESHTOKEN)) {\n      this.signInUserSession.setRefreshToken(new CognitoRefreshToken(jsonDataObject.refresh_token));\n    } else {\n      this.signInUserSession.setRefreshToken(refreshToken);\n    }\n    this.cacheTokensScopes();\n    this.userhandler.onSuccess(this.signInUserSession);\n  };\n\n  /**\n   * Launch Cognito Auth UI page.\n   * @param {string} URL the url to launch\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.launchUri = function launchUri() {};\n\n  // overwritten in constructor\n\n  /**\n   * @returns {string} scopes string\n   */\n  CognitoAuth.prototype.getSpaceSeperatedScopeString = function getSpaceSeperatedScopeString() {\n    var tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n    tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n    return encodeURIComponent(tokenScopesString);\n  };\n\n  /**\n   * Create the FQDN(fully qualified domain name) for authorization endpoint.\n   * @returns {string} url\n   */\n\n\n  CognitoAuth.prototype.getFQDNSignIn = function getFQDNSignIn() {\n    if (this.state == null) {\n      this.state = this.generateRandomString(this.getCognitoConstants().STATELENGTH, this.getCognitoConstants().STATEORIGINSTRING);\n    }\n\n    var identityProviderParam = this.IdentityProvider ? this.getCognitoConstants().AMPERSAND.concat(this.getCognitoConstants().DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER, this.getCognitoConstants().EQUALSIGN, this.IdentityProvider) : '';\n    var tokenScopesString = this.getSpaceSeperatedScopeString();\n\n    var userContextDataParam = '';\n    var userContextData = this.getUserContextData();\n    if (userContextData) {\n      userContextDataParam = this.getCognitoConstants().AMPERSAND + this.getCognitoConstants().DOMAIN_QUERY_PARAM_USERCONTEXTDATA + this.getCognitoConstants().EQUALSIGN + this.getUserContextData();\n    }\n\n    // Build the complete web domain to launch the login screen\n    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE, this.getCognitoConstants().EQUALSIGN, this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId(), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE, this.getCognitoConstants().EQUALSIGN, this.state, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString, identityProviderParam, userContextDataParam);\n\n    return uri;\n  };\n\n  /**\n   * Sign out the user.\n   * @returns {void}\n   */\n\n\n  CognitoAuth.prototype.signOut = function signOut() {\n    var URL = this.getFQDNSignOut();\n    this.signInUserSession = null;\n    this.clearCachedTokensScopes();\n    this.launchUri(URL);\n  };\n\n  /**\n   * Create the FQDN(fully qualified domain name) for signout endpoint.\n   * @returns {string} url\n   */\n\n\n  CognitoAuth.prototype.getFQDNSignOut = function getFQDNSignOut() {\n    var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId());\n    return uri;\n  };\n\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   **/\n\n\n  CognitoAuth.prototype.getUserContextData = function getUserContextData() {\n    if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n      return;\n    }\n\n    var _username = \"\";\n    if (this.username) {\n      _username = this.username;\n    }\n\n    var _userpoolId = \"\";\n    if (this.userpoolId) {\n      _userpoolId = this.userpoolId;\n    }\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      return AmazonCognitoAdvancedSecurityData.getData(_username, _userpoolId, this.clientId);\n    }\n  };\n\n  /**\n   * Helper method to let the user know if he has either a valid cached session \n   * or a valid authenticated session from the app integration callback.\n   * @returns {boolean} userSignedIn \n   */\n\n\n  CognitoAuth.prototype.isUserSignedIn = function isUserSignedIn() {\n    return this.signInUserSession != null && this.signInUserSession.isValid() || this.getCachedSession() != null && this.getCachedSession().isValid();\n  };\n\n  return CognitoAuth;\n}();\n\nexport default CognitoAuth;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}